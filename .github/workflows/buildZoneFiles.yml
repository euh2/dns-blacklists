name: CI
on:
  #push:
   # paths:
   #   - '.meta-data/latest-release.json'
  workflow_dispatch:
env:
  IMAGE_NAME: ${{ github.repository }}
jobs:
  build:
    name: Build Zone Files
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}

      - uses: actions/cache@v2
        with:
          path: |
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Build Zone Files
        uses: actions/setup-node@v2
        with:
          node-version: '12'
      - run: npm install
      #- run: npm build

  test:
    needs: [build]
    name: Validate Build
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2
      - name: Validate Zone Files
        run: |
          ls -la 
          docker build --file container/tests.Dockerfile -t test .
      - run: docker run test
      - name: Check App Build
        run: docker build --file container/app.Dockerfile --tag ${IMAGE_NAME:=dns-blacklists} .

  publish:
    needs: [build,test]
    name: Publish
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      
      - name: Get Release Tags
        id: get-release-tags
        run: |
          sudo apt-get install -y dateutils
          
          ur=`cat ./.meta-data/latest-upstream-release.json`
          ur="${ur//'%'/'%25'}"
          ur="${ur//$'\n'/'%0A'}"
          ur="${ur//$'\r'/'%0D'}"
          
          echo "::set-output name=urJSON::$ur"
          
          BUILD_NO=`cat .meta-data/latest-release.json | jq -r '.local_build_no += 1' || echo "1"`
          UPSTREAM_RELEASE=`cat .meta-data/latest-upstream-release.json | jq -r '.upstream_tag_name'`
          TAG_NAME=$UPSTREAM_RELEASE-$BUILD_NO
          echo "::set-output name=tag_name::$TAG_NAME"
          
          #BUILD_NO=$((++BUILD_NO))
          #UPSTREAM_RELEASE=`cat .meta-data/latest-upstream-release.json | jq -r '.upstream_tag_name'`
          #UPSTREAM_BODY=`cat .meta-data/latest-upstream-release.json | jq -r '.upstream_body'`
          #UPSTREAM_URL=`cat .meta-data/latest-upstream-release.json | jq -r '.upstream_url'`
          
          UPSTREAM_TIME=`cat .meta-data/latest-upstream-release.json | jq -r '.upstream_published_at'`
          NOW=`date -u +"%Y-%m-%dT%H:%M:%SZ"`
          MINUTES=`dateutils.ddiff $UPSTREAM_TIME $NOW -f '%M'`
          echo "::set-output name=minutes::$MINUTES"
          
          cat .meta-data/latest-upstream-release.json | jq '. + {"local_build_no": env.BUILD_NO,"local_tag_name":env.TAG_NAME}' > .meta-data/latest-release.json
                              
          #echo "::set-output name=upstream_tag_name::$UPSTREAM_RELEASE"
          #echo "::set-output name=upstream_body::$UPSTREAM_BODY"
          #echo "::set-output name=upstream_url::$UPSTREAM_URL"
          
        shell: bash

      - name: Check for modified files
        id: git-check
        run: echo ::set-output name=modified::$([ -z "`git status --porcelain`" ] && echo "false" || echo "true")
      - name: Commit latest release version
        if: steps.git-check.outputs.modified == 'true'
        run: |
          git config --global user.name '${{ github.actor }} via Bot'
          git config --global user.email '${{ github.actor }}@users.noreply.github.com'
          git add .
          git commit -am "Release ${{ steps.get-release-tags.outputs.tag_name }}"
          git tag ${{ steps.get-release-tags.outputs.tag_name }}
          
          git push origin --tags

      - name: Publish Release
        id: publish_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: ${{ steps.get-release-tags.outputs.tag_name }}
          release_name: Release ${{ steps.get-release-tags.outputs.tag_name }}
          body: |
            This Release was published ${{ steps.get-release-tags.outputs.minutes }} minutes after the [Upstream Release ${{fromJson(steps.get-release-tags.outputs.urJSON).upstream_tag_name}}](${{fromJson(steps.get-release-tags.outputs.urJSON).upstream_url}}):
                        
            ${{fromJson(steps.get-release-tags.outputs.urJSON).upstream_body}}
          draft: true
          prerelease: false
