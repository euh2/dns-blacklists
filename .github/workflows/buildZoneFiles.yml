name: CI/CD
on:
  push:
    paths:
      - '.meta-data/latest-upstream-release.json'
  workflow_dispatch:
env:
  IMAGE_NAME: ${{ github.repository }}
  BUILD_HOOK: ${{ secrets.BUILD_HOOK }}
jobs:
  build:
    name: Build Zone Files
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}

      - uses: actions/cache@v2
        with:
          path: |
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Build Zone Files
        uses: actions/setup-node@v2
        with:
          node-version: '12'
      - run: npm install
      - name: Build
        run: npm run build
        
      - uses: actions/upload-artifact@v2
        with:	
          name: ${{ github.run_id }}-artifacts
          path: pub

  test:
    needs: [build]
    name: Validate Build
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}
      - uses: actions/download-artifact@v2
        with:
          name: ${{ github.run_id }}-artifacts
          path: pub
    
      - name: Validate Zone Files
        run: |
          ls -la 
          docker build --file container/tests.Dockerfile -t test .
      - run: docker run test
      - name: Check App Build
        run: docker build --file container/app.Dockerfile --tag ${IMAGE_NAME:=dns-blacklists} .

  publish:
    needs: [build,test]
    name: Publish
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}
      - uses: actions/download-artifact@v2
        with:
          name: ${{ github.run_id }}-artifacts
          path: pub   
          
      - name: Get Release Tags
        id: get-release-tags
        run: |
          cat .meta-data/latest-*.json | jq -s ' add | . |= (.local_build_no += 1) | . |= (.local_tag_name = .upstream_tag_name + "-" + (.local_build_no | tostring)) | . |= (.minutes_since_published_at = ((now - (.upstream_published_at | fromdateiso8601)) / 60 | round))' | tee .meta-data/latest-release.json
          
          ur=`cat ./.meta-data/latest-release.json`
          ur="${ur//'%'/'%25'}"
          ur="${ur//$'\n'/'%0A'}"
          ur="${ur//$'\r'/'%0D'}"
          
          echo "::set-output name=releaseJSON::$ur"
          
        shell: bash

      - name: Check for modified files
        id: git-check
        run: echo ::set-output name=modified::$([ -z "`git status --porcelain`" ] && echo "false" || echo "true")
      
      - name: Commit latest release version
        if: steps.git-check.outputs.modified == 'true'
        run: |
          git config --global user.name '${{ github.actor }} via Bot'
          git config --global user.email '${{ github.actor }}@users.noreply.github.com'
          git add .
          git commit -am "Release ${{fromJson(steps.get-release-tags.outputs.releaseJSON).local_tag_name}}"
          git tag ${{fromJson(steps.get-release-tags.outputs.releaseJSON).local_tag_name}}
          
          git push --follow-tags
          
      - name: Publish Release
        id: publish_release
        uses: actions/create-release@v1
        
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }} 
        with:
          tag_name: ${{fromJson(steps.get-release-tags.outputs.releaseJSON).local_tag_name}}
          release_name: Release ${{fromJson(steps.get-release-tags.outputs.releaseJSON).local_tag_name}}
          body: |
            This Release was published ${{fromJson(steps.get-release-tags.outputs.releaseJSON).minutes_since_published_at}} minutes after the [Upstream Release ${{fromJson(steps.get-release-tags.outputs.releaseJSON).upstream_tag_name}}](${{fromJson(steps.get-release-tags.outputs.releaseJSON).upstream_url}}):
                        
            ${{fromJson(steps.get-release-tags.outputs.releaseJSON).upstream_body}}
          draft: true
          prerelease: false
      - name: Signal
        run: |
          curl -X POST $BUILD_HOOK
        shell: bash
        
          
