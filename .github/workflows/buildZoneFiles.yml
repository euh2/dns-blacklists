name: CI
on:
  push:
    paths:
      - '.meta-data/latest-release.json'
  workflow_dispatch:
env:
  IMAGE_NAME: ${{ github.repository }}
jobs:
  build:
    name: Build Zone Files
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}

      - uses: actions/cache@v2
        with:
          path: |
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Build Zone Files
        uses: actions/setup-node@v2
        with:
          node-version: '12'
      - run: |
          npm install
          npm run build

  test:
    needs: [build]
    name: Validate Zone Files
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Buildah Action
      uses: redhat-actions/buildah-build@v1
      with:
        image: test-zone-files
        tag: ephemeral
        dockerfiles: |
          ./container/tests.Dockerfile
        #build-args: |
        #  some_arg=some_value
    - name: Validate Zone Files
      run: podman run test-zone-files:ephemeral
    - name: Check App Build
      run: podman build . --file container/app.Dockerfile --tag $IMAGE_NAME

  publish:
    needs: [build,test]
    name: Publish
    runs-on: ubuntu-18.04
    steps:

      - name: Get Release Tags
        id: get-release-tags
        run: |
          BUILD_NO=`cat .meta-data/latest-release.json | jq '.local_build_no' || echo ""`
          BUILD_NO=${$((BUILD_NO+1)):=1}
          UPSTREAM_RELEASE=`cat .meta-data/latest-release.json | jq '.upstream_tag_name'`
          UPSTREAM_BODY=`cat .meta-data/latest-release.json | jq '.upstream_body'`
          TAG_NAME=$UPSTREAM_RELEASE-$BUILD_NO
          cat .meta-data/latest-release.json | jq '. + {"local_build_no": env.BUILD_NO,"local_tag_name":env.TAG_NAME}' \
            > .meta-data/latest-release.json
          echo "::set-output name=tag_name::$TAG_NAME"
          echo "::set-output name=upstream_tag_name::$UPSTREAM_RELEASE"
          echo "::set-output name=upstream_body::$UPSTREAM_BODY"
        shell: bash

      - name: Check for modified files
        id: git-check
        run: echo ::set-output name=modified::$([ -z "`git status --porcelain`" ] && echo "false" || echo "true")
      - name: Commit latest release version
        if: steps.git-check.outputs.modified == 'true'
        run: |
          git config --global user.name '${{ github.actor }} via Bot'
          git config --global user.email '${{ github.actor }}@users.noreply.github.com'
          git add .
          git commit -am "Release ${{ steps.get-release-tags.outputs.tag_name }}"
          git tag ${{ steps.get-release-tags.outputs.tag_name }}
          git push --tags

      - name: Publish Release
        id: publish_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.get-release-tags.outputs.tag_name }}
          release_name: Release ${{ steps.get-release-tags.outputs.tag_name }}
          body: |
            ${{ steps.get-release-tags.outputs.tag_name }}
          draft: false
          prerelease: false
